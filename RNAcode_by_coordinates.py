#!/usr/bin/python3
"""Get answer of Life, the Universe and Everything."""

from MafBlock import MafStream
import sys
import os
import subprocess
from main import build_segments
from main import hss_to_bed_line

# Minimal size and length that a maf block must have to be processed by RNAcode.
# Absolute lower boundaries
MIN_LENGTH = 12
MIN_SIZE = 3

# Parameters for concatenation of blocks even with impeding species. Species
# will be deleted.
# Length a block must exceed so that no species will be deleted.
MIN_LENGTH_DEL = 60
# Maximal number of species that can be deleted.
MAX_DEL_SPECIES = 1

# Parameter for splitting
MAX_LEN_NO_SPLIT = 3000

P_THRESHOLD = 0.001

GENOME_ALIGNMENT_DIR = "/scr/k61san2/john/rnacode_human_CS/multiz100way/"
RNACODE_WORKDIR = "/scr/k61san2/john/RNAcode_by_coordinates"


def get_result_table(result_file):
    """Build table from tsv file generated by RNAcode."""
    rnacode_res = []
    with open(result_file, "r", encoding="UTF-8") as f_handle:
        for line in f_handle.read().split("\n")[:-1]:
            line = line.split("\t")
            if float(line[-1]) > P_THRESHOLD:
                continue
            rnacode_res.append(line)
    return rnacode_res


def main():
    """Get answer of Life, the Universe and Everything."""
    chromosome = sys.argv[1]
    chromosome_dir = os.path.join(GENOME_ALIGNMENT_DIR, chromosome)
    maf_file_path = os.path.join(chromosome_dir, chromosome + ".maf.gz")
    if not os.path.isfile(maf_file_path):
        print(f"Maf file {maf_file_path} does not exist!")
        sys.exit(1)

    try:
        start = int(sys.argv[2])
    except ValueError:
        print(f"Arguments {sys.argv[1]} is not an integer!")
        sys.exit(1)

    try:
        end = int(sys.argv[3])
    except ValueError:
        print(f"Arguments {sys.argv[2]} is not an integer!")
        sys.exit(1)

    out_dir = os.path.join(RNACODE_WORKDIR, f"{chromosome}_{start}_{end}")
    if not os.path.isdir(out_dir):
        os.mkdir(out_dir)

    out_maf_path = os.path.join(out_dir, "raw_blocks.maf")
    bed_file_path = os.path.join(out_dir, "anno.bed")

    maf_stream = MafStream(
        path=maf_file_path,
        min_length_del=MIN_LENGTH_DEL,
        max_del_species=MAX_DEL_SPECIES,
        min_size=MIN_SIZE,
        min_length=MIN_LENGTH,
        max_len_no_split=MAX_LEN_NO_SPLIT,
    )

    maf_counter = 0
    overlap_found = False
    with open(out_maf_path, "w", encoding="UTF-8") as f_handle:
        for maf in maf_stream.discard_stream(position=(start, end)):
            start_maf, end_maf = maf.coordinates()
            # (StartA <= EndB) and (EndA >= StartB)
            if start <= end_maf and end >= start_maf:
                overlap_found = True
                if maf.size() - 1 < MIN_SIZE or maf.len_no_gaps() < MIN_LENGTH:
                    continue
                maf_counter += 1
                f_handle.write(str(maf))
            elif overlap_found:
                break

    if maf_counter == 0:
        print("No overlapping maf blocks found")
        sys.exit(1)

    call_str = f"RNAcode -t -o {out_dir}/RNAcode_results.tsv {out_dir}/raw_blocks.maf"
    completed_process = subprocess.run(
        call_str.split(), capture_output=True, text=True
    )
    if completed_process.returncode != 0:
        print(completed_process.stderr)
        print("Error using RNAcode")
        sys.exit(1)

    result_table = get_result_table(f"{out_dir}/RNAcode_results.tsv")
    segments = build_segments(result_table, chromosome, list_maf_blocks=False)
    bed_lines = hss_to_bed_line(segments)
    with open(bed_file_path, "w", encoding="UTF-8") as f_handle:
        f_handle.write(
            "\n".join([" ".join(map(str, line)) for line in bed_lines]) + "\n"
        )


if __name__ == "__main__":
    main()
